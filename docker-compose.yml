version: '3.8'

services:
  # PostgreSQL database for development and testing
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cofferl_dev
      POSTGRES_USER: cofferl
      POSTGRES_PASSWORD: cofferl_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cofferl -d cofferl_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["dev", "test", "db"]

  # Development environment
  dev:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - models_cache:/app/models
      - hf_cache:/app/.cache/huggingface
    environment:
      - COFFEE_DEV_MODE=true
      - COFFEE_MAX_TRAIN_SAMPLES=50
      - COFFEE_MAX_EVAL_SAMPLES=10
      - DATABASE_URL=postgresql://cofferl:cofferl_dev_password@postgres:5432/cofferl_dev
    command: ["uv", "run", "python", "-m", "pytest", "-v"]
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["dev"]

  # QLoRA training with GPU support
  train:
    build:
      context: .
      target: qlora
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./output:/app/output
      - ./logs:/app/logs
      - hf_cache:/app/.cache/huggingface
      - transformers_cache:/app/.cache/transformers
    environment:
      - COFFEE_OUTPUT_DIR=/app/output
      - TRANSFORMERS_CACHE=/app/.cache/transformers
      - HF_HOME=/app/.cache/huggingface
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: ["uv", "run", "python", "src/train_qlora.py"]
    profiles: ["train"]

  # Production inference service
  app:
    build:
      context: .
      target: production
    ports:
      - "7860:7860"
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data:ro
    environment:
      - GRADIO_SERVER_NAME=0.0.0.0
      - GRADIO_SERVER_PORT=7860
    restart: unless-stopped
    profiles: ["prod"]

  # Testing service
  test:
    build:
      context: .
      target: testing
    volumes:
      - .:/app
    environment:
      - COFFEE_DEV_MODE=true
      - COFFEE_MAX_TRAIN_SAMPLES=10
      - COFFEE_MAX_EVAL_SAMPLES=5
      - DATABASE_URL=postgresql://cofferl:cofferl_dev_password@postgres:5432/cofferl_dev
    command: ["uv", "run", "python", "-m", "pytest", "-v", "--tb=short"]
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["test"]

  # Jupyter notebook for development
  notebook:
    build:
      context: .
      target: development
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - models_cache:/app/models
      - hf_cache:/app/.cache/huggingface
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - DATABASE_URL=postgresql://cofferl:cofferl_dev_password@postgres:5432/cofferl_dev
    command: ["uv", "run", "jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["notebook"]

volumes:
  models_cache:
    driver: local
  hf_cache:
    driver: local
  transformers_cache:
    driver: local
  postgres_data:
    driver: local
